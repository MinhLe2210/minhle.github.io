[
{
	"uri": "/4-dynamodb/1-createdb/",
	"title": "Khởi tạo DynamoDB",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn tạo và cấu hình DynamoDB Table trên AWS Truy cập vào DynamoDB:\nỞ thanh bên trái của giao diện AWS Management Console, tìm và chọn DynamoDB. Sau khi vào trang DynamoDB, nhấp vào mục Create Table để bắt đầu quá trình tạo bảng mới. Tạo bảng (Table):\nTại trang Create Table, nhập vào tên bảng (Table Name) mà bạn muốn tạo. Ví dụ, bạn có thể đặt tên là PowerOfMathDatabase. Đặt tên cho Partition key là ID. Đây sẽ là khóa chính để xác định các mục (items) trong bảng. Cấu hình bảng:\nKéo xuống dưới và chọn Default Settings nếu bạn muốn sử dụng các thiết lập mặc định. Sau khi chọn xong, nhấp vào nút Create Table để tạo bảng. "
},
{
	"uri": "/",
	"title": "Triển khai Ứng dụng toán với Amplify",
	"tags": [],
	"description": "",
	"content": "Sơ đồ tổng quan bài thực hành Tổng quan Trong bài thực hành này, chúng ta sẽ triển khai một ứng dụng với AWS Amplify để quản lý toàn bộ quy trình triển khai và lưu trữ ứng dụng web, đồng thời sử dụng các dịch vụ khác như IAM, Lambda, API Gateway, và DynamoDB để xây dựng và bảo mật backend cho ứng dụng.\nTrước khi bắt đầu, hãy đảm bảo rằng bạn đã quen thuộc với việc triển khai các dịch vụ cơ bản trên AWS. Các tài liệu và hướng dẫn về cách triển khai ứng dụng với các dịch vụ AWS sẽ rất hữu ích để bạn nắm rõ quy trình tổng thể.\nAWS Amplify AWS Amplify là một nền tảng dịch vụ giúp bạn dễ dàng phát triển, triển khai, và quản lý các ứng dụng web hoặc di động. Amplify cung cấp một bộ công cụ mạnh mẽ cho phép bạn xây dựng cả frontend và backend của ứng dụng một cách nhanh chóng. Với Amplify, bạn có thể tích hợp dễ dàng với các dịch vụ AWS như API Gateway, Lambda, và DynamoDB để xây dựng backend cho ứng dụng của mình.\nIAM (Identity and Access Management) IAM (Quản lý danh tính và truy cập) là một dịch vụ của AWS cho phép bạn kiểm soát quyền truy cập đến các tài nguyên AWS của mình một cách an toàn. Với IAM, bạn có thể tạo người dùng, nhóm người dùng, và gán các quyền truy cập cụ thể để kiểm soát ai có thể thực hiện hành động gì trong tài khoản AWS của bạn. Điều này rất quan trọng để bảo vệ các tài nguyên nhạy cảm, đặc biệt khi bạn triển khai các ứng dụng với Lambda, API Gateway, và DynamoDB.\nAWS Lambda AWS Lambda là một dịch vụ điện toán không cần quản lý máy chủ, cho phép bạn chạy mã mà không cần phải thiết lập hoặc quản lý các máy chủ. Lambda tự động mở rộng ứng dụng của bạn dựa trên lưu lượng và chỉ tính phí cho thời gian thực hiện mã. Trong bài thực hành này, Lambda sẽ được sử dụng để xử lý logic phía server cho ứng dụng, với các yêu cầu được kích hoạt qua API Gateway và dữ liệu được lưu trữ trong DynamoDB.\nAPI Gateway API Gateway là một dịch vụ của AWS giúp bạn tạo, triển khai và quản lý các API RESTful một cách an toàn và hiệu quả. API Gateway hoạt động như một \u0026ldquo;cửa ngõ\u0026rdquo; cho phép các ứng dụng frontend của bạn giao tiếp với các chức năng backend được thực thi trong Lambda hoặc DynamoDB. API Gateway cũng hỗ trợ các tính năng như bảo mật, kiểm soát lưu lượng, và giám sát API, giúp bạn quản lý các API một cách toàn diện.\nDynamoDB Amazon DynamoDB là một dịch vụ cơ sở dữ liệu NoSQL được quản lý toàn phần, cung cấp khả năng lưu trữ và truy xuất dữ liệu với độ trễ thấp và hiệu suất cao. DynamoDB được sử dụng để lưu trữ dữ liệu của ứng dụng mà bạn triển khai trên Amplify, với các tương tác dữ liệu được thực hiện thông qua các Lambda function và API Gateway. DynamoDB đảm bảo rằng dữ liệu của bạn được lưu trữ an toàn, có khả năng mở rộng cao, và luôn sẵn sàng để phục vụ các yêu cầu từ ứng dụng của bạn.\nNội dung: Khởi tạo Amplify Khởi tạo Lambda Khởi tạo API Gateway Khởi tạo DynamoDB Dọn dẹp tài nguyên "
},
{
	"uri": "/1-amplify/",
	"title": "Khởi tạo AWS Amplify",
	"tags": [],
	"description": "",
	"content": "AWS Amplify là một nền tảng phát triển và triển khai ứng dụng toàn diện từ AWS, giúp các nhà phát triển xây dựng và triển khai ứng dụng web và di động một cách nhanh chóng và dễ dàng. Dưới đây là các bước cơ bản để triển khai ứng dụng với AWS Amplify:\nDeploy with Amplify Đăng nhập vào tài khoản AWS của bạn. Trên thanh tìm kiếm ở phần trên cùng của trang, gõ Amplify và chọn AMPLIFY từ danh sách các dịch vụ. AWS Amplify Console là nơi bạn quản lý toàn bộ quá trình triển khai và quản lý ứng dụng của mình. Tại giao diện AWS Amplify, nhấp vào nút Create a new app để bắt đầu quá trình tạo ứng dụng mới. AWS Amplify hỗ trợ nhiều cách triển khai, từ việc sử dụng Git repository đến tải trực tiếp tệp nén (zip) chứa mã nguồn. Trong trang Create a new app, chọn Deploy without Git nếu bạn muốn tải trực tiếp mã nguồn mà không cần kết nối với hệ thống quản lý phiên bản như Git. Đây là cách triển khai phù hợp khi bạn đã có sẵn mã nguồn và không cần sử dụng Git để quản lý. Cấu hình ứng dụng và triển khai: Đặt tên cho ứng dụng: Trong bước này, bạn cần đặt tên cho ứng dụng của mình. Ví dụ, bạn có thể đặt tên là \u0026ldquo;MathOfMath\u0026rdquo;. Đặt tên cho branch: Tiếp theo, đặt tên cho branch (nhánh) mà bạn sẽ triển khai, ví dụ \u0026ldquo;main\u0026rdquo; hoặc \u0026ldquo;production\u0026rdquo;. Tải lên tệp nén: Tiếp theo, bạn cần tải lên tệp zip chứa toàn bộ mã nguồn ứng dụng. AWS Amplify sẽ tự động giải nén và xử lý các tệp cần thiết để triển khai ứng dụng. Sau khi hoàn tất, nhấp vào nút Save and Deploy để bắt đầu quá trình triển khai. AWS Amplify sẽ tự động xử lý và triển khai ứng dụng lên hạ tầng AWS. index.zip index.zip (1 KB) "
},
{
	"uri": "/2-lambda/",
	"title": "Khởi tạo AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn tạo và triển khai AWS Lambda Function AWS Lambda là một dịch vụ điện toán không cần máy chủ (serverless) của Amazon Web Services (AWS), cho phép bạn chạy mã mà không cần quản lý máy chủ. Lambda tự động mở rộng và chỉ tính phí dựa trên thời gian thực hiện của mã, làm cho nó trở thành lựa chọn lý tưởng cho nhiều tác vụ tự động hóa và xử lý dữ liệu. Dưới đây là các bước để tạo và triển khai một hàm (function) với AWS Lambda.\nĐăng nhập vào tài khoản AWS của bạn và trong thanh tìm kiếm ở phần trên cùng, gõ \u0026ldquo;Lambda\u0026rdquo;. Chọn Lambda từ danh sách các dịch vụ để mở AWS Lambda Console. Tại đây, bạn có thể tạo, quản lý và giám sát các hàm Lambda của mình. Trong trang AWS Lambda Console, nhấp vào nút Create function để bắt đầu quá trình tạo mới một hàm. Đây là nơi bạn sẽ định nghĩa các thông tin cơ bản cho hàm Lambda của mình.\nCấu hình hàm Lambda:\nTrong trang Create function, chọn Author from scratch để bắt đầu từ đầu. Đặt tên cho function: Nhập tên cho hàm Lambda của bạn, ví dụ như \u0026ldquo;PowerOfMathFunction\u0026rdquo;. Chọn runtime: Chọn phiên bản runtime mà mã của bạn sẽ chạy, ví dụ: Python 3.11. Chọn kiến trúc: Chọn kiến trúc phù hợp, ví dụ x86_64. Sau khi hoàn tất các bước trên, nhấp vào Create function để tạo hàm. Viết và triển khai mã:\nSau khi hàm được tạo thành công, bạn sẽ được chuyển đến trang cấu hình của hàm. Tại phần Code source, bạn có thể nhập mã Python của mình. Ví dụ, bạn có thể nhập mã sau: # import the JSON utility package import json # import the Python math library import math # define the handler function that the Lambda service will use an entry point def lambda_handler(event, context): # extract the two numbers from the Lambda service\u0026#39;s event object mathResult = math.pow(int(event[\u0026#39;base\u0026#39;]), int(event[\u0026#39;exponent\u0026#39;])) # return a properly formatted JSON object return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Your result is \u0026#39; + str(mathResult)) } Nhấp vào Deploy để triển khai mã. Khi triển khai thành công, hàm của bạn đã sẵn sàng để được kích hoạt. Cấu hình và chạy thử nghiệm:\nSau khi triển khai, nhấp vào Test để cấu hình và chạy thử nghiệm. Chọn Create a new test event, đặt tên cho sự kiện, ví dụ như \u0026ldquo;TestEvent1\u0026rdquo;. Cấu hình parameters: Đối với mã trên, bạn cần cung cấp hai tham số trong JSON như trong hình Nhấp vào Create để lưu sự kiện thử nghiệm. Sau đó, nhấp vào Test để chạy hàm với các tham số đã cấu hình và kiểm tra kết quả. "
},
{
	"uri": "/4-dynamodb/2-permission/",
	"title": "Khởi tạo Permistion",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn tích hợp DynamoDB với AWS Lambda và cấu hình IAM Policy 1. Lấy Amazon Resource Name (ARN) của DynamoDB Table:\nSau khi bảng DynamoDB được khởi tạo thành công, truy cập vào trang Table của DynamoDB. Chọn bảng vừa tạo (ví dụ: PowerOfMathDatabase). Nhấp vào Additional Info để xem thông tin bổ sung, bao gồm Amazon Resource Name (ARN). Sao chép ARN này để sử dụng trong các bước tiếp theo. 2. Cấu hình quyền truy cập IAM cho Lambda:\nQuay lại trang AWS Lambda. Trong phần Configuration, kéo xuống và chọn Permissions. Nhấp vào Role name để mở trang IAM liên quan đến role này. 3. Tạo Inline Policy cho IAM Role:\nTrên trang IAM vừa mở, chọn tab Permissions. Nhấp vào Add permissions và chọn Create inline policy. Chuyển sang tab JSON trong phần Create policy. Dán đoạn mã JSON dưới đây vào Policy editor: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:PutItem\u0026#34;, \u0026#34;dynamodb:DeleteItem\u0026#34;, \u0026#34;dynamodb:GetItem\u0026#34;, \u0026#34;dynamodb:Scan\u0026#34;, \u0026#34;dynamodb:Query\u0026#34;, \u0026#34;dynamodb:UpdateItem\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;YOUR-TABLE-ARN\u0026#34; } ] } Ở phần \u0026ldquo;resource\u0026rdquo; nhớ thay đổi thành ARN của DynamoDB đã tạo trước đó\nNhấp vào Next để tiếp tục. 4. Đặt tên và tạo Policy:\nTrong trang tiếp theo, đặt tên cho Policy name (ví dụ: PowerOfMathPolicy). Nhấp vào Create policy để hoàn tất quá trình tạo policy. 5. Xác nhận tạo Policy thành công:\nQuay lại trang IAM, bạn sẽ thấy policy mới vừa tạo đã được gán vào role của Lambda. 6. Cập nhật code cho AWS Lambda:\nQuay lại trang AWS Lambda. Chọn phần Code và nhập đoạn code cần thiết để tương tác với DynamoDB, sử dụng ARN đã sao chép ở bước 1. "
},
{
	"uri": "/3-api-gateway/1-create-deploy/",
	"title": "Khởi tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn tạo và triển khai AWS API Gateway Truy cập vào API Gateway:\nỞ thanh bên trái của giao diện AWS Management Console, tìm và chọn API Gateway. Tại trang API Gateway, kéo xuống và tìm REST API, sau đó nhấp vào nút Build để bắt đầu. Tạo mới REST API:\nTrong trang Create REST API, chọn New API để tạo một API mới. Đặt tên cho API của bạn, ví dụ: PowerOfMathAPI. Sau khi đặt tên, nhấp vào nút Create API để hoàn tất bước tạo API. Tạo Resource và Method cho API:\nỞ trang API Gateway vừa tạo, tại thanh bên trái, nhấn chọn Resources. Trong phần Resources, chọn \u0026ldquo;/\u0026rdquo; (root resource), sau đó nhấp vào Create Method. Tại trang Create Method, chọn loại method là POST. Trong mục Lambda Function, chọn khu vực (region) là us-east-1 (hoặc khu vực bạn đã tạo Lambda function trước đó). Nhập tên của Lambda function đã tạo trước đó, sau đó nhấn Create Method. Cấu hình CORS cho API:\nQuay lại trang API Gateway, trong phần Resources, chọn \u0026ldquo;/\u0026rdquo; (root resource) một lần nữa. Nhấp vào nút Enable CORS để bật tính năng CORS (Cross-Origin Resource Sharing). Trong trang Enable CORS, chọn method POST và sau đó nhấn Save để lưu lại cấu hình. Deploy API:\nQuay trở lại trang API Gateway, chọn Deploy API. Trong phần Stage name, nhập tên của stage mà bạn muốn, ví dụ: staging. Nhấn vào nút Deploy để triển khai API. Lấy URL của API đã triển khai:\nSau khi deploy, truy cập vào phần Stages trong API Gateway. Tại đây, bạn sẽ thấy stage name vừa tạo, nhấp vào đó. Trong phần Invoke URL, sao chép URL của API để sử dụng sau này. "
},
{
	"uri": "/4-dynamodb/3-test/",
	"title": "Test Lambda với DynamoDb",
	"tags": [],
	"description": "",
	"content": "Hoàn tất tích hợp và kiểm tra kết quả với AWS Lambda và DynamoDB 1. Cập nhật code cho AWS Lambda:\nQuay lại trang AWS Lambda. Chọn phần Code trong bảng điều khiển của Lambda. Nhập đoạn code cần thiết để tương tác với DynamoDB. # import the AWS SDK (for Python the package name is boto3) import boto3 # import two packages to help us with dates and date formatting from time import gmtime, strftime # create a DynamoDB object using the AWS SDK dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) # use the DynamoDB object to select our table table = dynamodb.Table(\u0026#39;PowerOfMathDatabase\u0026#39;) # store the current time in a human readable format in a variable now = strftime(\u0026#34;%a, %d %b %Y %H:%M:%S +0000\u0026#34;, gmtime()) # define the handler function that the Lambda service will use an entry point def lambda_handler(event, context): # extract the two numbers from the Lambda service\u0026#39;s event object mathResult = math.pow(int(event[\u0026#39;base\u0026#39;]), int(event[\u0026#39;exponent\u0026#39;])) # write result and time to the DynamoDB table using the object we instantiated and save response in a variable response = table.put_item( Item={ \u0026#39;ID\u0026#39;: str(mathResult), \u0026#39;LatestGreetingTime\u0026#39;:now }) # return a properly formatted JSON object return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Your result is \u0026#39; + str(mathResult)) } Ở dòng table nhớ thay đổi thành tên Table mà bạn đã tạo trước đó\n2. Triển khai code và kiểm tra Lambda function:\nSau khi nhập code, nhấp vào Deploy để triển khai code lên Lambda function. Sau đó, nhấp vào nút Test để kiểm tra hoạt động của Lambda function. Nếu kiểm tra thành công, bạn sẽ thấy status code 200, báo hiệu rằng Lambda function đã thực hiện đúng chức năng. 3. Kiểm tra dữ liệu trong DynamoDB:\nQuay lại trang DynamoDB.\nChọn bảng dữ liệu (database) mà bạn đã sử dụng (ví dụ: PowerOfMathDatabase).\nNhấp vào Explore items để xem các mục (items) đã được lưu trữ trong bảng.\nBạn sẽ thấy kết quả mà Lambda function đã trả về thông qua API Gateway ở các bước trước. Kiểm tra trang web đã được triển khai:\nTruy cập vào AWS Amplify và mở giao diện quản lý ứng dụng của bạn. Tại đây, bạn sẽ thấy một liên kết dẫn đến trang web đã được deploy. Nhấp vào liên kết này để mở trang web và kiểm tra xem ứng dụng của bạn đã được triển khai thành công hay chưa. "
},
{
	"uri": "/3-api-gateway/",
	"title": "Khởi tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về API Gateway API Gateway là một dịch vụ được quản lý toàn phần của AWS, giúp bạn dễ dàng tạo, triển khai, quản lý, và bảo mật các API (Application Programming Interface) RESTful, WebSocket, và HTTP. Với API Gateway, bạn có thể tạo ra các API để giao tiếp giữa ứng dụng frontend (giao diện người dùng) và các dịch vụ backend (hậu trường) như AWS Lambda, DynamoDB, hoặc các hệ thống khác.\nTại sao lại sử dụng API Gateway? Quản lý và Bảo mật API dễ dàng:\nAPI Gateway cung cấp các tính năng bảo mật mạnh mẽ như quản lý khóa API (API Key), xác thực người dùng qua Amazon Cognito hoặc dịch vụ IAM, và khả năng bảo vệ chống lại các tấn công DDoS. Điều này giúp đảm bảo rằng chỉ những người dùng được phép mới có thể truy cập API của bạn. Tích hợp dễ dàng với các dịch vụ khác của AWS:\nAPI Gateway tích hợp chặt chẽ với các dịch vụ khác của AWS như Lambda, DynamoDB, và S3, giúp bạn dễ dàng xây dựng các hệ thống backend phức tạp mà không cần phải lo lắng về việc quản lý hạ tầng. Tự động mở rộng và quản lý tải:\nAPI Gateway có khả năng tự động mở rộng để xử lý lượng lớn yêu cầu từ người dùng mà không cần bạn phải can thiệp thủ công. Điều này đặc biệt hữu ích khi ứng dụng của bạn cần đáp ứng được số lượng người dùng lớn trong thời gian ngắn. Hỗ trợ nhiều loại API:\nVới API Gateway, bạn có thể xây dựng nhiều loại API khác nhau, bao gồm RESTful API, WebSocket API và HTTP API, phù hợp với nhiều loại ứng dụng từ các ứng dụng web truyền thống đến các ứng dụng thời gian thực như trò chuyện trực tuyến. Quản lý vòng đời API:\nAPI Gateway cung cấp các công cụ để bạn dễ dàng quản lý vòng đời của API, bao gồm việc kiểm soát các phiên bản API, triển khai API tới các môi trường khác nhau (như phát triển, kiểm thử, và sản xuất), và theo dõi hiệu suất API qua các công cụ giám sát tích hợp. Tóm lại API Gateway là một công cụ mạnh mẽ và linh hoạt, giúp bạn xây dựng các API một cách dễ dàng, an toàn và có khả năng mở rộng. Nó không chỉ giúp bạn quản lý API mà còn giúp tối ưu hóa hiệu suất của hệ thống backend, đáp ứng được nhu cầu của các ứng dụng hiện đại ngày nay.\n"
},
{
	"uri": "/3-api-gateway/2-test-api/",
	"title": "Test API Gateway",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn kiểm tra API trên API Gateway Kiểm tra API vừa tạo: Ở trang API Gateway, trong phần Resources, chọn API mà bạn muốn kiểm tra. Nhấp vào mục Test để mở giao diện kiểm tra API. Thực hiện kiểm tra API: Tại phần Request Body, nhập vào các tham số mà bạn muốn kiểm tra. Ví dụ, nếu API của bạn yêu cầu các tham số như base và exponent, bạn có thể nhập: { \u0026#34;base\u0026#34;: 3, \u0026#34;exponent\u0026#34;: 4 } Sau khi nhập các tham số, kéo xuống cuối trang và nhấn nút Test để thực hiện kiểm tra. Xem kết quả kiểm tra: Sau khi thực hiện kiểm tra, bạn sẽ thấy kết quả hiển thị bao gồm status code và response body. Nếu API hoạt động đúng, status code sẽ là 200. Nếu có lỗi, status code sẽ khác và sẽ có thông tin chi tiết về lỗi trong phần response body. "
},
{
	"uri": "/4-dynamodb/",
	"title": "Khởi tạo DynamoDB",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon DynamoDB Amazon DynamoDB là một dịch vụ cơ sở dữ liệu NoSQL được quản lý hoàn toàn bởi AWS. Được thiết kế để xử lý các khối lượng công việc với dữ liệu lớn và có độ trễ thấp, DynamoDB là lựa chọn lý tưởng cho các ứng dụng yêu cầu hiệu suất cao và khả năng mở rộng linh hoạt. DynamoDB hỗ trợ lưu trữ và truy xuất dữ liệu một cách nhanh chóng, với khả năng tự động mở rộng để đáp ứng các nhu cầu thay đổi của ứng dụng.\nTại sao lại sử dụng DynamoDB? Hiệu suất cao và độ trễ thấp:\nDynamoDB được tối ưu hóa cho hiệu suất cao với độ trễ dưới 10 mili giây. Điều này rất quan trọng đối với các ứng dụng yêu cầu tốc độ phản hồi nhanh, chẳng hạn như các ứng dụng thời gian thực, hệ thống thương mại điện tử, và các dịch vụ trò chơi trực tuyến. Khả năng mở rộng tự động:\nDynamoDB có khả năng mở rộng tự động, đáp ứng các nhu cầu tăng trưởng của dữ liệu và lưu lượng truy cập mà không cần quản trị viên can thiệp. Điều này giúp ứng dụng của bạn có thể mở rộng từ một vài yêu cầu mỗi giây đến hàng triệu yêu cầu mỗi giây mà không gặp phải các vấn đề về hiệu suất. Độ tin cậy và sẵn sàng cao:\nDynamoDB lưu trữ dữ liệu của bạn trên nhiều vùng sẵn sàng (Availability Zones) trong một khu vực (region), đảm bảo rằng dữ liệu luôn sẵn sàng và an toàn ngay cả khi một hoặc nhiều vùng sẵn sàng gặp sự cố. Điều này giúp bảo vệ dữ liệu của bạn khỏi mất mát và đảm bảo rằng ứng dụng của bạn luôn hoạt động. Không cần quản lý cơ sở hạ tầng:\nVì DynamoDB là một dịch vụ quản lý hoàn toàn, bạn không cần phải lo lắng về việc cài đặt, cấu hình, bảo trì hay cập nhật phần cứng hoặc phần mềm. Điều này giúp bạn tiết kiệm thời gian và tài nguyên, tập trung hơn vào việc phát triển ứng dụng. Tính năng bảo mật và kiểm soát quyền truy cập mạnh mẽ:\nDynamoDB tích hợp với AWS Identity and Access Management (IAM), giúp bạn kiểm soát chi tiết quyền truy cập đến dữ liệu của mình. Bạn có thể sử dụng các chính sách IAM để xác định ai có thể truy cập vào bảng DynamoDB và họ có thể thực hiện những hành động gì. Hỗ trợ cho các mô hình dữ liệu linh hoạt:\nDynamoDB hỗ trợ lưu trữ dữ liệu theo mô hình linh hoạt với các bảng không có cấu trúc cố định. Bạn có thể thêm hoặc bớt các thuộc tính của đối tượng mà không cần thay đổi cấu trúc của bảng, điều này rất hữu ích khi bạn cần phát triển và mở rộng ứng dụng nhanh chóng. Tích hợp dễ dàng với các dịch vụ AWS khác:\nDynamoDB tích hợp tốt với nhiều dịch vụ AWS khác như AWS Lambda, API Gateway, và S3, giúp bạn xây dựng các ứng dụng serverless hoặc các hệ thống phức tạp một cách dễ dàng. Tóm lại Amazon DynamoDB là một lựa chọn xuất sắc cho các ứng dụng yêu cầu cơ sở dữ liệu có hiệu suất cao, khả năng mở rộng và độ tin cậy tuyệt đối. Với việc không cần quản lý cơ sở hạ tầng và khả năng tích hợp mạnh mẽ với các dịch vụ AWS khác, DynamoDB cho phép bạn xây dựng các ứng dụng hiện đại, sẵn sàng cho sản xuất mà không cần lo lắng về quản trị cơ sở dữ liệu phức tạp.\n"
},
{
	"uri": "/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "test Dọn dẹp tài nguyên AWS Lambda: Dọn dẹp tài nguyên AWS Amplify: Dọn dẹp tài nguyên AWS API Gateway: Dọn dẹp tài nguyên Amazon DynamoDB: "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]